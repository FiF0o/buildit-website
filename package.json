{
  "name": "Buildit-website",
  "version": "1.0.0",
  "description": "buildit website, task manager inspired by how to use NPM as a build tool from @Keith Cirkel ",
  "main": "index.js",
  "author": "Jonathan Lazarini <jonathan.lazarini@wipro.com>",
  "license": "MIT",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.17.0",
    "babel-eslint": "^7.0.0",
    "babel-preset-es2015": "^6.16.0",
    "babelify": "^7.3.0",
    "browserify": "^13.1.0",
    "eslint": "^3.8.1",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-config-airbnb-base": "^8.0.0",
    "eslint-plugin-flowtype": "^2.20.0",
    "eslint-plugin-import": "^1.16.0",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.4.1",
    "graceful-fs": "^4.1.9",
    "hashmark": "^4.1.0",
    "http-server": "^0.9.0",
    "jquery": "^3.1.1",
    "jshint": "^2.5.10",
    "jstransformer": "^1.0.0",
    "karma": "^1.3.0",
    "karma-browserify": "^5.1.0",
    "karma-cli": "^1.0.1",
    "karma-mocha": "^1.2.0",
    "karma-phantomjs-launcher": "^1.0.2",
    "live-reload": "^1.1.0",
    "minifyify": "^7.3.4",
    "minimatch": "^3.0.3",
    "mocha": "^3.1.2",
    "node-sass": "^3.10.1",
    "nodemon": "^1.11.0",
    "opener": "^1.4.0",
    "parallelshell": "^2.0.0",
    "pug": "^2.0.0-beta6",
    "pug-cli": "^1.0.0-alpha6",
    "rimraf": "^2.2.8",
    "s3-cli": "^0.13.0",
    "sass-lint": "^1.9.1",
    "watchify": "^3.7.0"
  },
  "scripts": {
    "jsjs": "babel assets/scripts/kikou.js --watch -o dist/test.js --s",
    "clean": "rimraf dist/*",
    "prebuild": "npm run clean -s",
    "build": "npm run build:scripts -s && npm run build:markup -s && npm run build:styles",
    "build:scripts-old": "browserify -d assets/scripts/main.js -p [minifyify --compressPath . --map main.js.map --output dist/main.js.map] | hashmark -n dist/main.js -s -l 8 -m assets.json \"dist/{name}{hash}{ext}\"",
    "build:scripts-dev": "browserify --debug assets/scripts/main.js --outfile dist/main.js -t [ babelify --comments false ]",
    "fix:gem": "brew uninstall xz",
    "ruby:config": "gem install bundler",
    "update:gem": "sudo gem update --system && bundle install",
    "install:semantic-ui": "gem install semantic-ui-sass",
    "install:gems": "bundle install",
    "build:semantic-ui": "compass install semantic-ui",
    "sass-convert": "sass-convert -R --from scss --to sass assets/styles && rm assets/styles/styles.scss",
    "toto": "compass compile --output-style compressed && mkdir dist/tmp && cp dist/main.css dist/tmp/main.css && node_modules/.bin/hashmark -s -l 8 -m assets.json \"dist/tmp/main.css\" \"dist/tmp/{name}{hash}{ext}\"",
    "build:styles": "compass compile --output-style compressed",
    "build:styles-old": "node-sass assets/styles/main.sass --source-map true -o dist/ && hashmark -s -l 8 -m assets.json dist/main.css \"dist/{name}{hash}{ext}\"",
    "watch:semantic-ui": "compass watch assets/styles --poll & npm run live-reload",
    "build:scripts": "browserify --debug -e assets/scripts/main.js -t [ babelify --comments true ] -p [minifyify --compressPath . --map main.js.map --output dist/main.js.map] | hashmark -n dist/main.js -s -l 8 -m assets.json \"dist/{name}{hash}{ext}\"",
    "build:markup": "pug assets/markup --obj assets.json --out dist -p assets/markup/includes --pretty",
    "build:images": "cp -R assets/images dist/images",
    "sass:lint": "sass-lint -c /.sass-lint.yml 'assets/styles/**/*.sass' -v -q",
    "es:lint": "eslint assets/scripts/main.js",
    "build:fonts": "cp -R assets/fonts dist/fonts",
    "lint": "eslint assets/scripts/main.js",
    "test": "karma start --singleRun",
    "watch": "parallelshell \"npm run watch:test -s\" \"npm run watch:build -s\"",
    "watch:test": "karma start",
    "watch:build": "nodemon -q -w assets/ --ext \".\" --exec \"npm run build\"",
    "open:prod": "opener http://example.com",
    "open:stage": "opener http://staging.example.internal",
    "open:dev": "opener http://localhost:9090",
    "deploy:prod": "s3-cli sync ./dist/ s3://example-com/prod-site/",
    "deploy:stage": "s3-cli sync ./dist/ s3://example-com/stage-site/",
    "serve": "http-server dist/ -p 9090 ",
    "live-reload": "live-reload dist/ --port 9091 --delay 500",
    "dev": "npm run open:dev -s && parallelshell \"npm run live-reload -s\" \"npm run serve -s\" \"npm run watch -s\""
  },
  "eslintConfig": {
    "extends": "./eslint.js"
  }
}
